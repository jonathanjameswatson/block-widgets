import { defineNuxtModule } from '@nuxt/kit'
import { readFile, writeFile } from 'fs-extra'
import { format } from 'prettier'

const rawEmojiRulesRegExp = /rawEmojiRules = (?<!\\)`\n([\s\S]+?)\n(?<!\\)`/m
const rawEmojiRuleRegExp = /(.+?) ->\uFE0F? (.+?)$/gm

const goStringToTsString = (goFile: string) => {
  const rawEmojiRulesMatch = goFile.match(rawEmojiRulesRegExp)
  if (rawEmojiRulesMatch === null) {
    throw new Error('This parser is no longer valid.')
  }
  const rawEmojiRules = rawEmojiRulesMatch[1]
  const ruleMatches = [...rawEmojiRules.matchAll(rawEmojiRuleRegExp)]
  const rules: { [key: string]: string } = {}
  ruleMatches.forEach((ruleMatch: RegExpMatchArray) => {
    rules[ruleMatch[1].toLowerCase()] = ruleMatch[2]
  })
  return `// Generated by ~/modules/generateWordToFoodEmojis

export const wordToFoodEmoji: { [key: string]: string } = {
${Object.entries(rules)
  .map(([key, value]) => `  '${key}': '${value}'`)
  .join(',\n')},
}
`
}

export default defineNuxtModule({
  async setup(_options, _nuxt) {
    const goString = (await readFile(
      './modules/generateWordToFoodEmojis/example.go',
      'utf8'
    )) as string
    const tsString = format(goStringToTsString(goString), {
      semi: false,
      singleQuote: true,
      parser: 'typescript',
    })
    await writeFile('./ts/wordToFoodEmoji.generated.ts', tsString)
  },
})
